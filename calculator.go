package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

var history []string

func main() {
	fmt.Println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ Go!")

	// –°–æ–∑–¥–∞–µ–º —á–∏—Ç–∞—Ç–µ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–Ω—Å–æ–ª–∏
	reader := bufio.NewReader(os.Stdin)

	for {
		// –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥
		fmt.Print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞:\n1 - –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5 + 3)\n2 - –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥\n–∏—Å—Ç–æ—Ä–∏—è - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã—á–∏—Å–ª–µ–Ω–∏–π\n—Å—Ç–æ–ø - –í—ã—Ö–æ–¥\n–í–∞—à –≤—ã–±–æ—Ä: ")
		choice, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
			continue
		}

		choice = strings.TrimSpace(choice)

		if strings.ToLower(choice) == "—Å—Ç–æ–ø" {
			fmt.Print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			break
		}

		if strings.ToLower(choice) == "–∏—Å—Ç–æ—Ä–∏—è" {
			showHistory()
			continue
		}

		switch choice {
		case "1":
			processSingleLineInput(reader)
		case "2":
			processStepByStepInput(reader)
		default:
			fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}

func processSingleLineInput(reader *bufio.Reader) {
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 5 + 3): ")
	input, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
		return
	}
	input = strings.TrimSpace(input)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: "5+2" –∏ "5 + 2"
	processedInput := addSpacesAroundOperators(input)

	// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
	parts := strings.Fields(processedInput)
	if len(parts) != 3 {
		fmt.Println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—á–∏—Å–ª–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —á–∏—Å–ª–æ'")
		fmt.Println("–ü—Ä–∏–º–µ—Ä: 5 + 3, 10.5*2, 7-4, 15/3")
		return
	}

	// –ü–∞—Ä—Å–∏–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
	a, err := strconv.ParseFloat(parts[0], 64)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞: –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä
	operation := parts[1]

	// –ü–∞—Ä—Å–∏–º –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
	b, err := strconv.ParseFloat(parts[2], 64)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞: –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	calculateAndPrint(a, b, operation)
}

func addSpacesAroundOperators(input string) string {
	operators := []string{"+", "-", "/", "*", "x", "X", "—Ö", "–•"}

	for _, op := range operators {
		input = strings.ReplaceAll(input, op, " "+op+" ")
	}
	return input
}

func processStepByStepInput(reader *bufio.Reader) {
	var a, b float64
	var operation string

	// –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
	inputA, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
		return
	}
	inputA = strings.TrimSpace(inputA)
	_, err = fmt.Sscanf(inputA, "%f", &a)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–∏—Å–ª–∞:", err)
		return
	}

	// –ß—Ç–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (+, -, *, /, —Ö): ")
	inputOp, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
		return
	}
	operation = strings.TrimSpace(inputOp)

	// –ß—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —á–∏—Å–ª–∞
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ")
	inputB, err := reader.ReadString('\n')
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
		return
	}
	inputB = strings.TrimSpace(inputB)
	_, err = fmt.Sscanf(inputB, "%f", &b)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–∏—Å–ª–∞:", err)
		return
	}
	calculateAndPrint(a, b, operation)
}

func calculateAndPrint(a float64, b float64, operation string) {
	var result float64
	var validOperation bool = true

	switch operation {
	case "+":
		result = a + b
	case "-":
		result = a - b
	case "*":
		result = a * b
	case "/":
		if b == 0 {
			fmt.Println("–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!")
			return
		}
		result = a / b
	case "x", "X", "—Ö", "–•":
		result = a * b
	default:
		fmt.Println("–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è:", operation)
		fmt.Println("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: +, -, *, /")
		validOperation = false
	}

	if validOperation {
		// ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ–∑–¥–∞–µ–º expression
		expression := fmt.Sprintf("%.2f %s %.2f = %.2f", a, operation, b, result)
		fmt.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç: %s\n\n", expression)

		// –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
		addToHistory(expression)
	}
}

func addToHistory(expression string) {
	history = append(history, expression)
}

func showHistory() {
	if len(history) == 0 {
		fmt.Println("–ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
		return
	}

	fmt.Println("\nüìä –ò—Å—Ç–æ—Ä–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π:")
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	for i, expr := range history {
		fmt.Printf("%d. %s\n", i+1, expr)
	}
	fmt.Println("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	fmt.Printf("–í—Å–µ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: %d\n", len(history))
}
